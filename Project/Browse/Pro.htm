<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Browse\Pro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Browse\Pro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Dec 21 16:11:52 2016
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MS5611_Updata() &rArr; __hardfp_powl &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ca]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[65]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[65]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[93]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[94]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[95]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[92]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a2]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a1]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[61]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[62]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[82]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[97]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[98]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[99]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[90]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[91]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7b]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">EXTI4_IRQHandler</a> from nrf24l01.o(i.EXTI4_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6a]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a4]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[83]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a3]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[73]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[72]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[75]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[74]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9c]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9b]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[96]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a0]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7c]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[84]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[76]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[77]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[86]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a5]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[55]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6e]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6f]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[70]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[71]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[85]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[89]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8a]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[81]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[80]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[87]">UART4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[88]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[78]">USART1_IRQHandler</a> from gps.o(i.USART1_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[79]">USART2_IRQHandler</a> from sbus.o(i.USART2_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7a]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9a]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">ADC_Updata()</a> from battery.o(i._Z10ADC_Updatav) referenced 2 times from battery.o(.data)
 <LI><a href="#[3f]">Buzzer_Off()</a> from buzzer.o(i._Z10Buzzer_Offv) referenced 2 times from buzzer.o(.data)
 <LI><a href="#[3a]">GPS_Updata()</a> from gps.o(i._Z10GPS_Updatav) referenced 2 times from gps.o(.data)
 <LI><a href="#[10]">Loop_200Hz(unsigned short)</a> from scheduler.o(i._Z10Loop_200Hzt) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[f]">Loop_500Hz(unsigned short)</a> from scheduler.o(i._Z10Loop_500Hzt) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[2a]">Motor_Hold()</a> from motor.o(i._Z10Motor_Holdv) referenced 2 times from motor.o(.data)
 <LI><a href="#[27]">Motor_Init()</a> from motor.o(i._Z10Motor_Initv) referenced 2 times from motor.o(.data)
 <LI><a href="#[29]">Motor_Stop()</a> from motor.o(i._Z10Motor_Stopv) referenced 2 times from motor.o(.data)
 <LI><a href="#[1f]">TimeNow_MS()</a> from time.o(i._Z10TimeNow_MSv) referenced 2 times from time.o(.data)
 <LI><a href="#[20]">TimeNow_US()</a> from time.o(i._Z10TimeNow_USv) referenced 2 times from time.o(.data)
 <LI><a href="#[40]">Ultra_Init()</a> from ultra.o(i._Z10Ultra_Initv) referenced 2 times from ultra.o(.data)
 <LI><a href="#[3d]">Buzzer_Init()</a> from buzzer.o(i._Z11Buzzer_Initv) referenced 2 times from buzzer.o(.data)
 <LI><a href="#[12]">Communicate()</a> from communication.o(i._Z11Communicatev) referenced 2 times from communication.o(.data)
 <LI><a href="#[26]">LED_Reverse(unsigned short, unsigned)</a> from led.o(i._Z11LED_Reversetj) referenced 2 times from led.o(.data)
 <LI><a href="#[e]">Loop_1000Hz(unsigned short)</a> from scheduler.o(i._Z11Loop_1000Hzt) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[2e]">SBUS_Updata()</a> from sbus.o(i._Z11SBUS_Updatav) referenced 2 times from sbus.o(.data)
 <LI><a href="#[21]">Time_WaitMS(unsigned)</a> from time.o(i._Z11Time_WaitMSj) referenced 2 times from time.o(.data)
 <LI><a href="#[22]">Time_WaitUS(unsigned)</a> from time.o(i._Z11Time_WaitUSj) referenced 2 times from time.o(.data)
 <LI><a href="#[37]">ADS1118_Init()</a> from ads1118.o(i._Z12ADS1118_Initv) referenced 2 times from ads1118.o(.data)
 <LI><a href="#[3b]">HMC5883_Init()</a> from hmc5883.o(i._Z12HMC5883_Initv) referenced 2 times from hmc5883.o(.data)
 <LI><a href="#[2b]">MPU6050_Init()</a> from mpu6050.o(i._Z12MPU6050_Initv) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[28]">Motor_Output(BOOL)</a> from motor.o(i._Z12Motor_Output4BOOL) referenced 2 times from motor.o(.data)
 <LI><a href="#[2f]">SW_POS_Judge(unsigned short)</a> from sbus.o(i._Z12SW_POS_Judget) referenced 2 times from sbus.o(.data)
 <LI><a href="#[1d]">State_Updata(unsigned short)</a> from sysstate.o(i._Z12State_Updatat) referenced 2 times from sysstate.o(.data)
 <LI><a href="#[41]">Ultra_Updata()</a> from ultra.o(i._Z12Ultra_Updatav) referenced 2 times from ultra.o(.data)
 <LI><a href="#[19]">Updata_Eular()</a> from attitude.o(i._Z12Updata_Eularv) referenced 2 times from attitude.o(.data)
 <LI><a href="#[1c]">Body_To_Earth(Vector, float, float)</a> from math_user.o(i._Z13Body_To_Earth6Vectorff) referenced 2 times from math_user.o(.data)
 <LI><a href="#[47]">MS561101_Init()</a> from ms5611_spi.o(i._Z13MS561101_Initv) referenced 2 times from ms5611_spi.o(.data)
 <LI><a href="#[48]">MS5611_Updata()</a> from ms5611_spi.o(i._Z13MS5611_Updatav) referenced 2 times from ms5611_spi.o(.data)
 <LI><a href="#[30]">NRF24L01_Init(NRF_State)</a> from nrf24l01.o(i._Z13NRF24L01_Init9NRF_State) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[17]">Position_Init()</a> from posotion.o(i._Z13Position_Initv) referenced 2 times from posotion.o(.data)
 <LI><a href="#[45]">USART_Receive()</a> from usart.o(i._Z13USART_Receivev) referenced 2 times from usart.o(.data)
 <LI><a href="#[38]">ADS1118_Updata(unsigned char)</a> from ads1118.o(i._Z14ADS1118_Updatah) referenced 2 times from ads1118.o(.data)
 <LI><a href="#[13]">ATT_Inner_Loop(unsigned)</a> from flycontrol.o(i._Z14ATT_Inner_Loopj) referenced 2 times from flycontrol.o(.data)
 <LI><a href="#[14]">ATT_Outer_Loop(unsigned)</a> from flycontrol.o(i._Z14ATT_Outer_Loopj) referenced 2 times from flycontrol.o(.data)
 <LI><a href="#[3c]">HMC5883_Updata()</a> from hmc5883.o(i._Z14HMC5883_Updatav) referenced 2 times from hmc5883.o(.data)
 <LI><a href="#[2c]">MPU6050_Updata()</a> from mpu6050.o(i._Z14MPU6050_Updatav) referenced 2 times from mpu6050.o(.data)
 <LI><a href="#[15]">POS_Inner_Loop(unsigned)</a> from flycontrol.o(i._Z14POS_Inner_Loopj) referenced 2 times from flycontrol.o(.data)
 <LI><a href="#[16]">POS_Outer_Loop(unsigned)</a> from flycontrol.o(i._Z14POS_Outer_Loopj) referenced 2 times from flycontrol.o(.data)
 <LI><a href="#[44]">USART_SendChar()</a> from usart.o(i._Z14USART_SendCharv) referenced 2 times from usart.o(.data)
 <LI><a href="#[18]">Position_Updata(unsigned short)</a> from posotion.o(i._Z15Position_Updatat) referenced 2 times from posotion.o(.data)
 <LI><a href="#[42]">USART_Init_User(unsigned)</a> from usart.o(i._Z15USART_Init_Userj) referenced 2 times from usart.o(.data)
 <LI><a href="#[32]">NRF24L01_GetData()</a> from nrf24l01.o(i._Z16NRF24L01_GetDatav) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[46]">USART_Free_RXBUF()</a> from usart.o(i._Z16USART_Free_RXBUFv) referenced 2 times from usart.o(.data)
 <LI><a href="#[31]">NRF24L01_SendData()</a> from nrf24l01.o(i._Z17NRF24L01_SendDatav) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[34]">NRF24L01_Free_RXBUF()</a> from nrf24l01.o(i._Z19NRF24L01_Free_RXBUFv) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[43]">USART_Request_TXBUF()</a> from usart.o(i._Z19USART_Request_TXBUFv) referenced 2 times from usart.o(.data)
 <LI><a href="#[33]">NRF24L01_Request_ACKBUF(unsigned char)</a> from nrf24l01.o(i._Z23NRF24L01_Request_ACKBUFh) referenced 2 times from nrf24l01.o(.data)
 <LI><a href="#[24]">LED_On(unsigned short)</a> from led.o(i._Z6LED_Ont) referenced 2 times from led.o(.data)
 <LI><a href="#[25]">LED_Off(unsigned short)</a> from led.o(i._Z7LED_Offt) referenced 2 times from led.o(.data)
 <LI><a href="#[35]">ADC_Init()</a> from battery.o(i._Z8ADC_Initv) referenced 2 times from battery.o(.data)
 <LI><a href="#[39]">GPS_Init()</a> from gps.o(i._Z8GPS_Initv) referenced 2 times from gps.o(.data)
 <LI><a href="#[23]">LED_Init()</a> from led.o(i._Z8LED_Initv) referenced 2 times from led.o(.data)
 <LI><a href="#[3e]">Buzzer_On(unsigned short)</a> from buzzer.o(i._Z9Buzzer_Ont) referenced 2 times from buzzer.o(.data)
 <LI><a href="#[1a]">Constrain(double, double, double)</a> from math_user.o(i._Z9Constrainddd) referenced 2 times from math_user.o(.data)
 <LI><a href="#[1b]">Dead_Zone(int, int)</a> from math_user.o(i._Z9Dead_Zoneii) referenced 2 times from math_user.o(.data)
 <LI><a href="#[11]">Loop_50Hz(unsigned short)</a> from scheduler.o(i._Z9Loop_50Hzt) referenced 2 times from scheduler.o(.data)
 <LI><a href="#[2d]">SBUS_Init()</a> from sbus.o(i._Z9SBUS_Initv) referenced 2 times from sbus.o(.data)
 <LI><a href="#[1e]">Time_Init()</a> from time.o(i._Z9Time_Initv) referenced 2 times from time.o(.data)
 <LI><a href="#[a7]">PID::PID()</a> from pid.o(i._ZN3PIDC1Ev) referenced from communication.o(i._Z16Send_PID_Para_PCh)
 <LI><a href="#[a8]">Vector::Vector()</a> from attitude.o(i._ZN6VectorC1Ev) referenced from ms5611_spi.o(i.__sti___12_MS5611_SPI_c_dec73ae7)
 <LI><a href="#[a8]">Vector::Vector()</a> from attitude.o(i._ZN6VectorC1Ev) referenced from ultra.o(i.__sti___7_Ultra_c_220f73de)
 <LI><a href="#[a8]">Vector::Vector()</a> from attitude.o(i._ZN6VectorC1Ev) referenced from hmc5883.o(i.__sti___9_HMC5883_c_5f2e7b48)
 <LI><a href="#[a8]">Vector::Vector()</a> from attitude.o(i._ZN6VectorC1Ev) referenced from mpu6050.o(i.__sti___9_MPU6050_c_b1a692db)
 <LI><a href="#[b1]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[ac]">__sti___10_Attitude_c_70178b78</a> from attitude.o(i.__sti___10_Attitude_c_70178b78) referenced from attitude.o(.init_array)
 <LI><a href="#[ab]">__sti___10_Posotion_c_Pos_Data</a> from posotion.o(i.__sti___10_Posotion_c_Pos_Data) referenced from posotion.o(.init_array)
 <LI><a href="#[aa]">__sti___12_FlyControl_c_6e3fbe5e</a> from flycontrol.o(i.__sti___12_FlyControl_c_6e3fbe5e) referenced from flycontrol.o(.init_array)
 <LI><a href="#[b0]">__sti___12_MS5611_SPI_c_dec73ae7</a> from ms5611_spi.o(i.__sti___12_MS5611_SPI_c_dec73ae7) referenced from ms5611_spi.o(.init_array)
 <LI><a href="#[a9]">__sti___6_main_c_TG_50HZ</a> from main.o(i.__sti___6_main_c_TG_50HZ) referenced from main.o(.init_array)
 <LI><a href="#[af]">__sti___7_Ultra_c_220f73de</a> from ultra.o(i.__sti___7_Ultra_c_220f73de) referenced from ultra.o(.init_array)
 <LI><a href="#[ae]">__sti___9_HMC5883_c_5f2e7b48</a> from hmc5883.o(i.__sti___9_HMC5883_c_5f2e7b48) referenced from hmc5883.o(.init_array)
 <LI><a href="#[ad]">__sti___9_MPU6050_c_b1a692db</a> from mpu6050.o(i.__sti___9_MPU6050_c_b1a692db) referenced from mpu6050.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a2]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a3]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[b4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[cb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[49]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeNow_US()
</UL>

<P><STRONG><a name="[c4]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1c4]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c8]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1c5]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1c9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[1cb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[165]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[164]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[162]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[163]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[167]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[4d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Init()
</UL>

<P><STRONG><a name="[fb]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Init()
</UL>

<P><STRONG><a name="[50]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrf24l01.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI4_IRQHandler &rArr; NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg(unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadBuf(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_IRQ_Init()
</UL>

<P><STRONG><a name="[f8]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>

<P><STRONG><a name="[d2]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>

<P><STRONG><a name="[d5]"></a>FLASH_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[f9]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>

<P><STRONG><a name="[d4]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>

<P><STRONG><a name="[f7]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>

<P><STRONG><a name="[d3]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[e4]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Init()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GPIO_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_GPIO_Init()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GOIO_Init()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_GPIO_Init()
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GPIO_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_GPIO_Init()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_GPIO_Init()
</UL>

<P><STRONG><a name="[de]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On(unsigned short)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init()
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Off()
</UL>

<P><STRONG><a name="[160]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off(unsigned short)
</UL>

<P><STRONG><a name="[4b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_IRQ_Init()
</UL>

<P><STRONG><a name="[187]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GPIO_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_GPIO_Init()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GOIO_Init()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Init()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_GPIO_Init()
</UL>

<P><STRONG><a name="[e2]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_Init()
</UL>

<P><STRONG><a name="[118]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GOIO_Init()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_Init()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_IRQ_Init()
</UL>

<P><STRONG><a name="[dd]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init()
</UL>

<P><STRONG><a name="[14b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_Init()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_Init()
</UL>

<P><STRONG><a name="[11e]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_RW(unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[120]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_RW(unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[11f]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_RW(unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>

<P><STRONG><a name="[14a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_Init()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_Init()
</UL>

<P><STRONG><a name="[4f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_IRQ_Init()
</UL>

<P><STRONG><a name="[52]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, time.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[ee]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[e7]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[e8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[e9]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[ea]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[eb]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[ec]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[df]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Output(BOOL)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Hold()
</UL>

<P><STRONG><a name="[e0]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Output(BOOL)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Hold()
</UL>

<P><STRONG><a name="[e1]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Output(BOOL)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Hold()
</UL>

<P><STRONG><a name="[e6]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>

<P><STRONG><a name="[78]"></a>USART1_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gps.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>USART2_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, sbus.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>USART3_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
</UL>

<P><STRONG><a name="[da]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendChar()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
</UL>

<P><STRONG><a name="[dc]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Init()
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_User(unsigned)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC_Updata()</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, battery.o(i._Z10ADC_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Updata()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>Buzzer_Off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, buzzer.o(i._Z10Buzzer_Offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buzzer_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>GPS_Updata()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gps.o(i._Z10GPS_Updatav))
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Loop_200Hz(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scheduler.o(i._Z10Loop_200Hzt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Loop_200Hz(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Loop_500Hz(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scheduler.o(i._Z10Loop_500Hzt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Loop_500Hz(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>Motor_Hold()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motor.o(i._Z10Motor_Holdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Hold()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Motor_Init()</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, motor.o(i._Z10Motor_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Motor_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>Motor_Stop()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, motor.o(i._Z10Motor_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[155]"></a>Read_Flash(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mpu6050.o(i._Z10Read_Flasht))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Para_Read()
</UL>

<P><STRONG><a name="[108]"></a>Send_RC_PC()</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, communication.o(i._Z10Send_RC_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_RC_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>

<P><STRONG><a name="[1f]"></a>TimeNow_MS()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(i._Z10TimeNow_MSv))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_WaitMS(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>TimeNow_US()</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, time.o(i._Z10TimeNow_USv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimeNow_US() &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_WaitUS(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>Ultra_Init()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ultra.o(i._Z10Ultra_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Ultra_Init() &rArr; I2C_Soft_::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultra.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>Buzzer_Init()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, buzzer.o(i._Z11Buzzer_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Buzzer_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Communicate()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, communication.o(i._Z11Communicatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Communicate() &rArr; Data_Analysis_PC() &rArr; Send_PID_Para_PC(unsigned char) &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analysis_MCU2()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analysis_PC()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_MCU2()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> communication.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LED_Reverse(unsigned short, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, led.o(i._Z11LED_Reversetj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Reverse(unsigned short, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Loop_1000Hz(unsigned short)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(i._Z11Loop_1000Hzt))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>SBUS_Updata()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, sbus.o(i._Z11SBUS_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SBUS_Updata() &rArr; SBUS_Receive()
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Receive()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbus.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Time_WaitMS(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, time.o(i._Z11Time_WaitMSj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Time_WaitMS(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeNow_MS()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Time_WaitUS(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, time.o(i._Z11Time_WaitUSj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Time_WaitUS(unsigned) &rArr; TimeNow_US() &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeNow_US()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>Write_Flash()</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, mpu6050.o(i._Z11Write_Flashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Write_Flash() &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Para_Save()
</UL>

<P><STRONG><a name="[fa]"></a>ADC_DMA_Init()</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, battery.o(i._Z12ADC_DMA_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_DMA_Init() &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[37]"></a>ADS1118_Init()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ads1118.o(i._Z12ADS1118_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADS1118_Init() &rArr; ADS1118_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_GPIO_Init()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_Init()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_RW_REG(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads1118.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>HMC5883_Init()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hmc5883.o(i._Z12HMC5883_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HMC5883_Init() &rArr; I2C_Soft_::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Init()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmc5883.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>MPU6050_Init()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, mpu6050.o(i._Z12MPU6050_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MPU6050_Init() &rArr; I2C_Soft_::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Para_Read()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Init()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>Motor_Output(BOOL)</STRONG> (Thumb, 700 bytes, Stack size 48 bytes, motor.o(i._Z12Motor_Output4BOOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor_Output(BOOL) &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>SBUS_Receive()</STRONG> (Thumb, 216 bytes, Stack size 44 bytes, sbus.o(i._Z12SBUS_Receivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SBUS_Receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Updata()
</UL>

<P><STRONG><a name="[2f]"></a>SW_POS_Judge(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sbus.o(i._Z12SW_POS_Judget))
<BR>[Address Reference Count : 1]<UL><LI> sbus.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>Send_Data_PC()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, communication.o(i._Z12Send_Data_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Send_Data_PC() &rArr; Send_Senser_PC()
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_UserData_PC()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Senser_PC()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Motor_PC()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Eular_PC()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RC_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communicate()
</UL>

<P><STRONG><a name="[144]"></a>Send_RC_MCU2()</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, communication.o(i._Z12Send_RC_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_RC_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_MCU2()
</UL>

<P><STRONG><a name="[10e]"></a>Sensor_State()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sysstate.o(i._Z12Sensor_Statev))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Updata(unsigned short)
</UL>

<P><STRONG><a name="[1d]"></a>State_Updata(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysstate.o(i._Z12State_Updatat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = State_Updata(unsigned short) &rArr; Pow_State(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_State(unsigned short)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_State(unsigned short)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_State(unsigned short)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_State()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysstate.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>Ultra_Updata()</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, ultra.o(i._Z12Ultra_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Ultra_Updata() &rArr; I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char) &rArr; I2C_Soft_::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(float)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultra.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Updata_Eular()</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, attitude.o(i._Z12Updata_Eularv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Updata_Eular() &rArr; Updata_Quaternion(Vector, Vector, Vector, double) &rArr; Safe_Asin(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitude.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>ADC_GOIO_Init()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, battery.o(i._Z13ADC_GOIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GOIO_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init()
</UL>

<P><STRONG><a name="[1c]"></a>Body_To_Earth(Vector, float, float)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, math_user.o(i._Z13Body_To_Earth6Vectorff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Body_To_Earth(Vector, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> math_user.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>MS5611_SPI_RW(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z13MS5611_SPI_RWh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Send_Commond(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Read_3Byte()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_PROM_Read()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Reset()
</UL>

<P><STRONG><a name="[30]"></a>NRF24L01_Init(NRF_State)</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, nrf24l01.o(i._Z13NRF24L01_Init9NRF_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NRF24L01_Init(NRF_State) &rArr; NRF24L01_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_GPIO_Init()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg(unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_Init()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_IRQ_Init()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Position_Init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, posotion.o(i._Z13Position_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Position_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posotion.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>Send_Eular_PC()</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, communication.o(i._Z13Send_Eular_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send_Eular_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>

<P><STRONG><a name="[109]"></a>Send_Motor_PC()</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, communication.o(i._Z13Send_Motor_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Motor_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>

<P><STRONG><a name="[150]"></a>Send_Reply_PC(unsigned short, unsigned char)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, communication.o(i._Z13Send_Reply_PCth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Reply_PC(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analysis_PC()
</UL>

<P><STRONG><a name="[45]"></a>USART_Receive()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(i._Z13USART_Receivev))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>ADS1118_RW_REG(unsigned short)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ads1118.o(i._Z14ADS1118_RW_REGt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS1118_RW_REG(unsigned short) &rArr; ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Init()
</UL>

<P><STRONG><a name="[12c]"></a>ADS1118_SPI_RW(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ads1118.o(i._Z14ADS1118_SPI_RWh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_Data(unsigned short)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_RW_REG(unsigned short)
</UL>

<P><STRONG><a name="[38]"></a>ADS1118_Updata(unsigned char)</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, ads1118.o(i._Z14ADS1118_Updatah))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADS1118_Updata(unsigned char) &rArr; ADS1118_Read_Data(unsigned short) &rArr; ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Read_Data(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ads1118.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ATT_Inner_Loop(unsigned)</STRONG> (Thumb, 766 bytes, Stack size 40 bytes, flycontrol.o(i._Z14ATT_Inner_Loopj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ATT_Inner_Loop(unsigned) &rArr; PID::Cal_PID_POS(int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Rst()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flycontrol.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ATT_Outer_Loop(unsigned)</STRONG> (Thumb, 958 bytes, Stack size 40 bytes, flycontrol.o(i._Z14ATT_Outer_Loopj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ATT_Outer_Loop(unsigned) &rArr; PID::Cal_PID_POS(int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Rst()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radians(float)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flycontrol.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>HMC5883_Updata()</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, hmc5883.o(i._Z14HMC5883_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HMC5883_Updata() &rArr; Filter_MidValue::MidValue(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(Vector)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::SendByte(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::ReadByte()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::WaitAck()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Start()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::NoAck()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Stop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Ack()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmc5883.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>MPU6050_Updata()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6050.o(i._Z14MPU6050_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU6050_Updata() &rArr; MPU6050_Read_GYR() &rArr; Filter_MidValue::MidValue(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Calibrate()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_GYR()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_ACC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>POS_Inner_Loop(unsigned)</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, flycontrol.o(i._Z14POS_Inner_Loopj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = POS_Inner_Loop(unsigned) &rArr; PID::Cal_PID_POS(int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Rst()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flycontrol.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>POS_Outer_Loop(unsigned)</STRONG> (Thumb, 1176 bytes, Stack size 24 bytes, flycontrol.o(i._Z14POS_Outer_Loopj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = POS_Outer_Loop(unsigned) &rArr; PID::Cal_PID_POS(int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Rst()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flycontrol.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>Send_Data_MCU2()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, communication.o(i._Z14Send_Data_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send_Data_MCU2() &rArr; Send_Battery_MS5611_MCU2()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Battery_MS5611_MCU2()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Motor_State_MCU2()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Eular_MCU2()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_RC_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communicate()
</UL>

<P><STRONG><a name="[107]"></a>Send_Senser_PC()</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, communication.o(i._Z14Send_Senser_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send_Senser_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>

<P><STRONG><a name="[145]"></a>USART_Init_GPS(unsigned)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, gps.o(i._Z14USART_Init_GPSj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_Init_GPS(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Init()
</UL>

<P><STRONG><a name="[44]"></a>USART_SendChar()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i._Z14USART_SendCharv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_SendChar() &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>ACC_Fuse_Updata(unsigned short, float)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, posotion.o(i._Z15ACC_Fuse_Updatatf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ACC_Fuse_Updata(unsigned short, float) &rArr; Filter_Balance::BalanceFilter(float, float, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Updata(unsigned short)
</UL>

<P><STRONG><a name="[11c]"></a>MS5611_SPI_Init()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ms5611_spi.o(i._Z15MS5611_SPI_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS5611_SPI_Init() &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101_Init()
</UL>

<P><STRONG><a name="[14c]"></a>NRF24L01_SPI_RW(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf24l01.o(i._Z15NRF24L01_SPI_RWh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg(unsigned char, unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadBuf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[18]"></a>Position_Updata(unsigned short)</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, posotion.o(i._Z15Position_Updatat))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Position_Updata(unsigned short) &rArr; Ultra_Fuse_Updata(unsigned short, float) &rArr; Filter_Balance::BalanceFilter(float, float, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Fuse_Updata(unsigned short, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Fuse_Updata(unsigned short, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Fuse_Updata(unsigned short, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posotion.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>Send_Eular_MCU2()</STRONG> (Thumb, 740 bytes, Stack size 16 bytes, communication.o(i._Z15Send_Eular_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Eular_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_MCU2()
</UL>

<P><STRONG><a name="[42]"></a>USART_Init_User(unsigned)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usart.o(i._Z15USART_Init_Userj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_Init_User(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>ADS1118_SPI_Init()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ads1118.o(i._Z16ADS1118_SPI_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADS1118_SPI_Init() &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Init()
</UL>

<P><STRONG><a name="[10d]"></a>Controller_State(unsigned short)</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, sysstate.o(i._Z16Controller_Statet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Controller_State(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Updata(unsigned short)
</UL>

<P><STRONG><a name="[f3]"></a>Data_Analysis_PC()</STRONG> (Thumb, 2334 bytes, Stack size 24 bytes, communication.o(i._Z16Data_Analysis_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Data_Analysis_PC() &rArr; Send_PID_Para_PC(unsigned char) &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_PID_Para_PC(unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Reply_PC(unsigned short, unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communicate()
</UL>

<P><STRONG><a name="[13d]"></a>MPU6050_Read_ACC()</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, mpu6050.o(i._Z16MPU6050_Read_ACCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU6050_Read_ACC() &rArr; Filter_2nd::LPF2ndFilter(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::LPF2ndFilter(Vector)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Updata()
</UL>

<P><STRONG><a name="[13e]"></a>MPU6050_Read_GYR()</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, mpu6050.o(i._Z16MPU6050_Read_GYRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU6050_Read_GYR() &rArr; Filter_MidValue::MidValue(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(Vector)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Updata()
</UL>

<P><STRONG><a name="[11b]"></a>MS5611_GPIO_Init()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ms5611_spi.o(i._Z16MS5611_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MS5611_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101_Init()
</UL>

<P><STRONG><a name="[32]"></a>NRF24L01_GetData()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf24l01.o(i._Z16NRF24L01_GetDatav))
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>NRF24L01_ReadBuf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf24l01.o(i._Z16NRF24L01_ReadBufhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_ReadBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>NRF24L01_ReadReg(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf24l01.o(i._Z16NRF24L01_ReadRegh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_ReadReg(unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>Send_PID_Para_PC(unsigned char)</STRONG> (Thumb, 1198 bytes, Stack size 264 bytes, communication.o(i._Z16Send_PID_Para_PCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Send_PID_Para_PC(unsigned char) &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analysis_PC()
</UL>

<P><STRONG><a name="[10a]"></a>Send_UserData_PC()</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, communication.o(i._Z16Send_UserData_PCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_UserData_PC()
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_PC()
</UL>

<P><STRONG><a name="[46]"></a>USART_Free_RXBUF()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(i._Z16USART_Free_RXBUFv))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>ADS1118_GPIO_Init()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ads1118.o(i._Z17ADS1118_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADS1118_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Init()
</UL>

<P><STRONG><a name="[12d]"></a>ADS1118_Read_Data(unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ads1118.o(i._Z17ADS1118_Read_Datat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADS1118_Read_Data(unsigned short) &rArr; ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1118_Updata(unsigned char)
</UL>

<P><STRONG><a name="[13f]"></a>MPU6050_Calibrate()</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, mpu6050.o(i._Z17MPU6050_Calibratev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU6050_Calibrate() &rArr; MPU6050_Para_Save() &rArr; Write_Flash() &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Para_Save()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Updata()
</UL>

<P><STRONG><a name="[101]"></a>MPU6050_Para_Read()</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, mpu6050.o(i._Z17MPU6050_Para_Readv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MPU6050_Para_Read()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init()
</UL>

<P><STRONG><a name="[154]"></a>MPU6050_Para_Save()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6050.o(i._Z17MPU6050_Para_Savev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU6050_Para_Save() &rArr; Write_Flash() &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Flash()
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Calibrate()
</UL>

<P><STRONG><a name="[12a]"></a>NRF24L01_IRQ_Init()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, nrf24l01.o(i._Z17NRF24L01_IRQ_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_IRQ_Init() &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
</UL>

<P><STRONG><a name="[12b]"></a>NRF24L01_SPI_Init()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, nrf24l01.o(i._Z17NRF24L01_SPI_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_SPI_Init() &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
</UL>

<P><STRONG><a name="[31]"></a>NRF24L01_SendData()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf24l01.o(i._Z17NRF24L01_SendDatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_SendData() &rArr; NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf24l01.o(i._Z17NRF24L01_WriteBufhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NRF24L01_WriteBuf(unsigned char, unsigned char*, unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SendData()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>NRF24L01_WriteReg(unsigned char, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf24l01.o(i._Z17NRF24L01_WriteReghh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_WriteReg(unsigned char, unsigned char) &rArr; NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>Ultra_Fuse_Updata(unsigned short, float)</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, posotion.o(i._Z17Ultra_Fuse_Updatatf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Ultra_Fuse_Updata(unsigned short, float) &rArr; Filter_Balance::BalanceFilter(float, float, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Updata(unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>Updata_Quaternion(Vector, Vector, Vector, double)</STRONG> (Thumb, 2424 bytes, Stack size 248 bytes, attitude.o(i._Z17Updata_Quaternion6VectorS_S_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Updata_Quaternion(Vector, Vector, Vector, double) &rArr; Safe_Asin(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safe_Asin(float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degrees(float)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sqrt_f32(float, float*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radians(float)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Eular()
</UL>

<P><STRONG><a name="[f4]"></a>Data_Analysis_MCU2()</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, communication.o(i._Z18Data_Analysis_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Data_Analysis_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communicate()
</UL>

<P><STRONG><a name="[14d]"></a>MS5611_Fuse_Updata(unsigned short, float)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, posotion.o(i._Z18MS5611_Fuse_Updatatf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MS5611_Fuse_Updata(unsigned short, float) &rArr; Filter_Balance::BalanceFilter(float, float, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Updata(unsigned short)
</UL>

<P><STRONG><a name="[129]"></a>NRF24L01_GPIO_Init()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, nrf24l01.o(i._Z18NRF24L01_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NRF24L01_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init(NRF_State)
</UL>

<P><STRONG><a name="[34]"></a>NRF24L01_Free_RXBUF()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf24l01.o(i._Z19NRF24L01_Free_RXBUFv))
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>USART_Request_TXBUF()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usart.o(i._Z19USART_Request_TXBUFv))
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>Send_Motor_State_MCU2()</STRONG> (Thumb, 608 bytes, Stack size 16 bytes, communication.o(i._Z21Send_Motor_State_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Motor_State_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_MCU2()
</UL>

<P><STRONG><a name="[33]"></a>NRF24L01_Request_ACKBUF(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf24l01.o(i._Z23NRF24L01_Request_ACKBUFh))
<BR>[Address Reference Count : 1]<UL><LI> nrf24l01.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>Send_Battery_MS5611_MCU2()</STRONG> (Thumb, 708 bytes, Stack size 16 bytes, communication.o(i._Z24Send_Battery_MS5611_MCU2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Battery_MS5611_MCU2()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data_MCU2()
</UL>

<P><STRONG><a name="[24]"></a>LED_On(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(i._Z6LED_Ont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_On(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>Degrees(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math_user.o(i._Z7Degreesf))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
</UL>

<P><STRONG><a name="[25]"></a>LED_Off(unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, led.o(i._Z7LED_Offt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_Off(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>Radians(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, math_user.o(i._Z7Radiansf))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
</UL>

<P><STRONG><a name="[35]"></a>ADC_Init()</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, battery.o(i._Z8ADC_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ADC_Init() &rArr; ADC_DMA_Init() &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GOIO_Init()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>GPS_Init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gps.o(i._Z8GPS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GPS_Init() &rArr; USART_Init_GPS(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init_GPS(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LED_Init()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, led.o(i._Z8LED_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off(unsigned short)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>RC_State(unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sysstate.o(i._Z8RC_Statet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_State(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Updata(unsigned short)
</UL>

<P><STRONG><a name="[3e]"></a>Buzzer_On(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, buzzer.o(i._Z9Buzzer_Ont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buzzer_On(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Constrain(double, double, double)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, math_user.o(i._Z9Constrainddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Constrain(double, double, double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> math_user.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Dead_Zone(int, int)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, math_user.o(i._Z9Dead_Zoneii))
<BR>[Address Reference Count : 1]<UL><LI> math_user.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Loop_50Hz(unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i._Z9Loop_50Hzt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Loop_50Hz(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>Pow_State(unsigned short)</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, sysstate.o(i._Z9Pow_Statet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pow_State(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State_Updata(unsigned short)
</UL>

<P><STRONG><a name="[2d]"></a>SBUS_Init()</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sbus.o(i._Z9SBUS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SBUS_Init() &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sbus.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>Safe_Asin(float)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, math_user.o(i._Z9Safe_Asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Safe_Asin(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
</UL>

<P><STRONG><a name="[1e]"></a>Time_Init()</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, time.o(i._Z9Time_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Time_Init() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>Filter_2nd::LPF2ndFilter(Vector)</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, filter.o(i._ZN10Filter_2nd12LPF2ndFilterE6Vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Filter_2nd::LPF2ndFilter(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_ACC()
</UL>

<P><STRONG><a name="[128]"></a>Filter_2nd::LPF2ndFilter(float)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, filter.o(i._ZN10Filter_2nd12LPF2ndFilterEf))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[16a]"></a>Filter_2nd::Filter_2nd(float, float, float, float, float)</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, filter.o(i._ZN10Filter_2ndC1Efffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_2nd::Filter_2nd(float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Attitude_c_70178b78
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MPU6050_c_b1a692db
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_MS5611_SPI_c_dec73ae7
</UL>

<P><STRONG><a name="[1cc]"></a>Filter_2nd::Filter_2nd__sub_object(float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filter.o(i._ZN10Filter_2ndC1Efffff), UNUSED)

<P><STRONG><a name="[149]"></a>Filter_Balance::BalanceFilter(float, float, double)</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, filter.o(i._ZN14Filter_Balance13BalanceFilterEffd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Filter_Balance::BalanceFilter(float, float, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Fuse_Updata(unsigned short, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Fuse_Updata(unsigned short, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Fuse_Updata(unsigned short, float)
</UL>

<P><STRONG><a name="[185]"></a>Filter_Balance::Filter_Balance(float, float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, posotion.o(i._ZN14Filter_BalanceC1Efff))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Posotion_c_Pos_Data
</UL>

<P><STRONG><a name="[1cd]"></a>Filter_Balance::Filter_Balance__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, posotion.o(i._ZN14Filter_BalanceC1Efff), UNUSED)

<P><STRONG><a name="[16b]"></a>Filter_MidValue::Bubble(float*)</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, filter.o(i._ZN15Filter_MidValue6BubbleEPf))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(float)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(Vector)
</UL>

<P><STRONG><a name="[13b]"></a>Filter_MidValue::MidValue(Vector)</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, filter.o(i._ZN15Filter_MidValue8MidValueE6Vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Filter_MidValue::MidValue(Vector)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::Bubble(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_GYR()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[110]"></a>Filter_MidValue::MidValue(float)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, filter.o(i._ZN15Filter_MidValue8MidValueEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Filter_MidValue::MidValue(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::Bubble(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
</UL>

<P><STRONG><a name="[130]"></a>PID::Cal_PID_POS(int)</STRONG> (Thumb, 616 bytes, Stack size 72 bytes, pid.o(i._ZN3PID11Cal_PID_POSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PID::Cal_PID_POS(int) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
</UL>

<P><STRONG><a name="[12e]"></a>PID::Rst()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pid.o(i._ZN3PID3RstEv))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
</UL>

<P><STRONG><a name="[16e]"></a>PID::PID(float, float, float, float)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pid.o(i._ZN3PIDC1Effff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PID::PID(float, float, float, float) &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_FlyControl_c_6e3fbe5e
</UL>

<P><STRONG><a name="[1ce]"></a>PID::PID__sub_object(float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, pid.o(i._ZN3PIDC1Effff), UNUSED)

<P><STRONG><a name="[a7]"></a>PID::PID()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pid.o(i._ZN3PIDC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> communication.o(i._Z16Send_PID_Para_PCh)
</UL>
<P><STRONG><a name="[1cf]"></a>PID::PID__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN3PIDC1Ev), UNUSED)

<P><STRONG><a name="[13c]"></a>Vector::Vector(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hmc5883.o(i._ZN6VectorC1Efff))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_HMC5883_c_5f2e7b48
</UL>

<P><STRONG><a name="[1d0]"></a>Vector::Vector__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hmc5883.o(i._ZN6VectorC1Efff), UNUSED)

<P><STRONG><a name="[a8]"></a>Vector::Vector()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, attitude.o(i._ZN6VectorC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::Filter_2nd(float, float, float, float, float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Attitude_c_70178b78
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Calibrate()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MPU6050_c_b1a692db
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(Vector)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::LPF2ndFilter(Vector)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> mpu6050.o(i.__sti___9_MPU6050_c_b1a692db)
<LI> ultra.o(i.__sti___7_Ultra_c_220f73de)
<LI> hmc5883.o(i.__sti___9_HMC5883_c_5f2e7b48)
<LI> ms5611_spi.o(i.__sti___12_MS5611_SPI_c_dec73ae7)
</UL>
<P><STRONG><a name="[1d1]"></a>Vector::Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, attitude.o(i._ZN6VectorC1Ev), UNUSED)

<P><STRONG><a name="[186]"></a>Target_::Target_(void(*)(unsigned short), int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._ZN7Target_C1EPFvtEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Target_::Target_(void(*)(unsigned short), int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_TG_50HZ
</UL>

<P><STRONG><a name="[1d2]"></a>Target_::Target___sub_object(void(*)(unsigned short), int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN7Target_C1EPFvtEi), UNUSED)

<P><STRONG><a name="[10f]"></a>I2C_Soft_::Single_Read(unsigned char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, i2c_soft.o(i._ZN9I2C_Soft_11Single_ReadEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Soft_::Single_Read(unsigned char, unsigned char) &rArr; I2C_Soft_::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::SendByte(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::ReadByte()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::WaitAck()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Start()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::NoAck()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_GYR()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Read_ACC()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
</UL>

<P><STRONG><a name="[100]"></a>I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, i2c_soft.o(i._ZN9I2C_Soft_12Single_WriteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char) &rArr; I2C_Soft_::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::SendByte(unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::WaitAck()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Start()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Init()
</UL>

<P><STRONG><a name="[138]"></a>I2C_Soft_::Ack()</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, i2c_soft.o(i._ZN9I2C_Soft_3AckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Soft_::Ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[f0]"></a>I2C_Soft_::Init()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i2c_soft.o(i._ZN9I2C_Soft_4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Soft_::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init()
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Init()
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Init()
</UL>

<P><STRONG><a name="[13a]"></a>I2C_Soft_::Stop()</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, i2c_soft.o(i._ZN9I2C_Soft_4StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Soft_::Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[16f]"></a>I2C_Soft_::Delay()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c_soft.o(i._ZN9I2C_Soft_5DelayEv))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::SendByte(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::ReadByte()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::WaitAck()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Start()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::NoAck()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Stop()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Ack()
</UL>

<P><STRONG><a name="[139]"></a>I2C_Soft_::NoAck()</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, i2c_soft.o(i._ZN9I2C_Soft_5NoAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Soft_::NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[134]"></a>I2C_Soft_::Start()</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, i2c_soft.o(i._ZN9I2C_Soft_5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Soft_::Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[136]"></a>I2C_Soft_::WaitAck()</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, i2c_soft.o(i._ZN9I2C_Soft_7WaitAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Soft_::WaitAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[137]"></a>I2C_Soft_::ReadByte()</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, i2c_soft.o(i._ZN9I2C_Soft_8ReadByteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Soft_::ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[135]"></a>I2C_Soft_::SendByte(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, i2c_soft.o(i._ZN9I2C_Soft_8SendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Soft_::SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Write(unsigned char, unsigned char, unsigned char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::Single_Read(unsigned char, unsigned char)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMC5883_Updata()
</UL>

<P><STRONG><a name="[170]"></a>I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mpu6050.o(i._ZN9I2C_Soft_C1Ecttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MPU6050_c_b1a692db
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Ultra_c_220f73de
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_HMC5883_c_5f2e7b48
</UL>

<P><STRONG><a name="[1d3]"></a>I2C_Soft_::I2C_Soft___sub_object(char, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, mpu6050.o(i._ZN9I2C_Soft_C1Ecttt), UNUSED)

<P><STRONG><a name="[168]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysstate.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pow_State(unsigned short)
</UL>

<P><STRONG><a name="[182]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[172]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_PID_Para_PC(unsigned char)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_MPU6050_c_b1a692db
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_MS5611_SPI_c_dec73ae7
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Ultra_c_220f73de
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_HMC5883_c_5f2e7b48
</UL>

<P><STRONG><a name="[153]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Calibrate()
</UL>

<P><STRONG><a name="[169]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Safe_Asin(float)
</UL>

<P><STRONG><a name="[15c]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
</UL>

<P><STRONG><a name="[177]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powl
</UL>

<P><STRONG><a name="[127]"></a>__hardfp_powf</STRONG> (Thumb, 1518 bytes, Stack size 16 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[1d4]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[124]"></a>__hardfp_powl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, powl.o(i.__hardfp_powl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_powl &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[180]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[179]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[178]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17d]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17a]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[174]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[176]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[175]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[183]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[173]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[119]"></a>arm_cos_f32</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, arm_cos_f32.o(i.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Body_To_Earth(Vector, float, float)
</UL>

<P><STRONG><a name="[11a]"></a>arm_sin_f32</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, arm_sin_f32.o(i.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Body_To_Earth(Vector, float, float)
</UL>

<P><STRONG><a name="[17c]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17b]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[171]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d5]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1d6]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1d7]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1d8]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1d9]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
</UL>

<P><STRONG><a name="[189]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[18f]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[193]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[191]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
</UL>

<P><STRONG><a name="[192]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_PID_Para_PC(unsigned char)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Output(BOOL)
</UL>

<P><STRONG><a name="[194]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Output(BOOL)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1da]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[1db]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
</UL>

<P><STRONG><a name="[1dc]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Eular()
</UL>

<P><STRONG><a name="[1dd]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constrain(double, double, double)
</UL>

<P><STRONG><a name="[195]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[198]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Eular()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[196]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[18b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[18e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Fuse_Updata(unsigned short, float)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Constrain(double, double, double)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[197]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[199]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[188]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::Cal_PID_POS(int)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[19b]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::BalanceFilter(float, float, double)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Fuse_Updata(unsigned short, float)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Fuse_Updata(unsigned short, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_Fuse_Updata(unsigned short, float)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Outer_Loop(unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POS_Inner_Loop(unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Outer_Loop(unsigned)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_Inner_Loop(unsigned)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analysis_PC()
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
</UL>

<P><STRONG><a name="[19c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ultra_Updata()
</UL>

<P><STRONG><a name="[1de]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[126]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[1df]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[19d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[b7]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1e0]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1e1]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[18a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[19e]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[190]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[181]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[19f]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a9]"></a>__sti___6_main_c_TG_50HZ</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_TG_50HZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___6_main_c_TG_50HZ &rArr; Target_::Target_(void(*)(unsigned short), int)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_::Target_(void(*)(unsigned short), int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[aa]"></a>__sti___12_FlyControl_c_6e3fbe5e</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, flycontrol.o(i.__sti___12_FlyControl_c_6e3fbe5e))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___12_FlyControl_c_6e3fbe5e &rArr; PID::PID(float, float, float, float) &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID::PID(float, float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flycontrol.o(.init_array)
</UL>
<P><STRONG><a name="[ab]"></a>__sti___10_Posotion_c_Pos_Data</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, posotion.o(i.__sti___10_Posotion_c_Pos_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___10_Posotion_c_Pos_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Balance::Filter_Balance(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posotion.o(.init_array)
</UL>
<P><STRONG><a name="[15a]"></a>arm_sqrt_f32(float, float*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, attitude.o(i._Z12arm_sqrt_f32fPf))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Quaternion(Vector, Vector, Vector, double)
</UL>

<P><STRONG><a name="[ac]"></a>__sti___10_Attitude_c_70178b78</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, attitude.o(i.__sti___10_Attitude_c_70178b78))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___10_Attitude_c_70178b78 &rArr; Filter_2nd::Filter_2nd(float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::Filter_2nd(float, float, float, float, float)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitude.o(.init_array)
</UL>
<P><STRONG><a name="[ad]"></a>__sti___9_MPU6050_c_b1a692db</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mpu6050.o(i.__sti___9_MPU6050_c_b1a692db))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __sti___9_MPU6050_c_b1a692db &rArr; Filter_2nd::Filter_2nd(float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::Filter_2nd(float, float, float, float, float)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(.init_array)
</UL>
<P><STRONG><a name="[ae]"></a>__sti___9_HMC5883_c_5f2e7b48</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hmc5883.o(i.__sti___9_HMC5883_c_5f2e7b48))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___9_HMC5883_c_5f2e7b48 &rArr; I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector::Vector(float, float, float)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hmc5883.o(.init_array)
</UL>
<P><STRONG><a name="[af]"></a>__sti___7_Ultra_c_220f73de</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ultra.o(i.__sti___7_Ultra_c_220f73de))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___7_Ultra_c_220f73de &rArr; I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Soft_::I2C_Soft_(char, unsigned short, unsigned short, unsigned short)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ultra.o(.init_array)
</UL>
<P><STRONG><a name="[102]"></a>MS5611_Reset()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z12MS5611_Resetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS5611_Reset() &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101_Init()
</UL>

<P><STRONG><a name="[47]"></a>MS561101_Init()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z13MS561101_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MS561101_Init() &rArr; MS5611_GPIO_Init() &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GPIO_Init()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_Init()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_PROM_Read()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Reset()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms5611_spi.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>MS5611_Updata()</STRONG> (Thumb, 828 bytes, Stack size 104 bytes, ms5611_spi.o(i._Z13MS5611_Updatav))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MS5611_Updata() &rArr; __hardfp_powl &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_MidValue::MidValue(float)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::LPF2ndFilter(float)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetTemperature()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetPressure()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powl
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms5611_spi.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>MS5611_PROM_Read()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ms5611_spi.o(i._Z16MS5611_PROM_Readv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS5611_PROM_Read() &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS561101_Init()
</UL>

<P><STRONG><a name="[156]"></a>MS5611_Read_3Byte()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ms5611_spi.o(i._Z17MS5611_Read_3Bytev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS5611_Read_3Byte() &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetTemperature()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetPressure()
</UL>

<P><STRONG><a name="[122]"></a>MS5611_GetPressure()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z18MS5611_GetPressurev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS5611_GetPressure() &rArr; MS5611_Read_3Byte() &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Send_Commond(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Read_3Byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[15f]"></a>MS5611_Send_Commond(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z19MS5611_Send_Commondh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS5611_Send_Commond(unsigned char) &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetTemperature()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_GetPressure()
</UL>

<P><STRONG><a name="[121]"></a>MS5611_GetTemperature()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ms5611_spi.o(i._Z21MS5611_GetTemperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS5611_GetTemperature() &rArr; MS5611_Read_3Byte() &rArr; MS5611_SPI_RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Send_Commond(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Read_3Byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS5611_Updata()
</UL>

<P><STRONG><a name="[b0]"></a>__sti___12_MS5611_SPI_c_dec73ae7</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ms5611_spi.o(i.__sti___12_MS5611_SPI_c_dec73ae7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___12_MS5611_SPI_c_dec73ae7 &rArr; Filter_2nd::Filter_2nd(float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_2nd::Filter_2nd(float, float, float, float, float)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms5611_spi.o(.init_array)
</UL>
<P><STRONG><a name="[d6]"></a>SetSysClock()</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i._Z11SetSysClockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[18d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
